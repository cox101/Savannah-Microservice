# Default values for savannah-microservice.
replicaCount: 2

image:
  repository: your-docker-username/savannah-microservice
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 8000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: api.savannah-microservice.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: savannah-microservice-tls
      hosts:
        - api.savannah-microservice.com

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables
env:
  DEBUG: "False"
  ALLOWED_HOSTS: "api.savannah-microservice.com,localhost"

# Secrets (create these in your cluster)
secrets:
  secretKey: "your-secret-key"
  databaseUrl: "postgresql://user:password@postgres:5432/savannah_microservice"
  redisUrl: "redis://redis:6379/0"
  africastalkingUsername: "your-username"
  africastalkingApiKey: "your-api-key"
  africastalkingSenderId: "SAVANNAH"

# PostgreSQL dependency configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres"
    username: "savannah"
    password: "savannah123"
    database: "savannah_microservice"
  primary:
    persistence:
      enabled: true
      size: 8Gi

# Redis dependency configuration
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi

# Celery worker configuration
celery:
  enabled: true
  replicaCount: 2
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 150m
      memory: 128Mi

# Health checks
healthcheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /api/auth/health/
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /api/auth/health/
      port: 8000
    initialDelaySeconds: 5
    periodSeconds: 5

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
